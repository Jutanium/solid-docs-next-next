---
import type { MarkdownHeading } from "astro";
import type { CollectionEntry } from "astro:content";
import LeftSidebar from "../components/LeftSidebar.astro";
import RightSidebar from "../components/RightSidebar.astro";
import Header from "../components/Header/Header.astro";

interface Props {
  content: CollectionEntry<"docs">["data"];
  headings: MarkdownHeading[];
}

const { content, headings } = Astro.props;

const currentPage = Astro.url.pathname;
---

<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/logos/solid-icon.svg" />
    <link rel="alternate icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="stylesheet" href="/global.css" />
    <title>{content.title}</title>
  </head>
  <body>
    <Header />
    <main>
      <aside class="left-side">
        <LeftSidebar currentPage={currentPage} />
      </aside>
      <section class="content-container">
        <article class="prose">
          <slot />
        </article>
      </section>
      <aside class="right-side">
        <RightSidebar headings={headings} />
      </aside>
    </main>
  </body>
</html>

<style>
  :root {
    --left-sidebar-width: 400px;
    --right-sidebar-width: 240px;
  }

  html {
    scroll-margin-top: calc(var(--header-height) + 20px);
    scroll-padding-top: calc(var(--header-height) + 20px);
  }

  main {
    display: flex;
    flex-direction: row;
    padding-top: var(--header-height);
  }

  .content-container {
    width: 100%;
    min-width: 0;
  }

  article {
    max-width: 60ch;
    margin-inline: auto;
    padding-block: var(--spacing-4);
    padding-inline: var(--spacing-10);
  }

  aside {
    display: flex;
    position: fixed;
    top: var(--header-height);
    overflow-y: auto;
  }

  .left-side {
    visibility: hidden;
    width: var(--left-sidebar-width);
  }

  .right-side {
    visibility: hidden;
    inset-inline-end: 0;
    width: var(--right-sidebar-width);
  }

  @media (min-width: 72em) {
    .content-container {
      margin-inline-end: var(--right-sidebar-width);
    }

    .right-side {
      visibility: visible;
    }
  }

  @media (min-width: 50em) {
    .content-container {
      margin-inline-start: var(--left-sidebar-width);
    }

    .left-side {
      visibility: visible;
    }
  }
</style>

<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  document.documentElement.setAttribute("data-theme", theme);
  window.localStorage.setItem("theme", theme);

  // Copy code blocks to clipboard
  let copyButtonLabel = "Copy Code";
  let codeBlocks = Array.from(document.querySelectorAll("pre"));

  async function copyCode(block, button) {
    let code = block.querySelector("code");
    let text = code.innerText;

    await navigator.clipboard.writeText(text);

    button.innerText = "Copied!";

    setTimeout(() => {
      button.innerText = copyButtonLabel;
    }, 1000);
  }

  for (let codeBlock of codeBlocks) {
    let wrapper = document.createElement("div");
    wrapper.style.position = "relative";

    let copyButton = document.createElement("button");
    copyButton.className = "copy-code";
    copyButton.innerHTML = copyButtonLabel;

    codeBlock.setAttribute("tabindex", "0");
    codeBlock.appendChild(copyButton);
    // wrap codebock with relative parent element
    codeBlock.parentNode.insertBefore(wrapper, codeBlock);
    wrapper.appendChild(codeBlock);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }
</script>
